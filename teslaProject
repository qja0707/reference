Ideas
시리 혹은 구글 어시스턴트와 연동하여 미래 지향적인 앱 (Hi Tes!) 시리처럼 차가 살아있는 느낌, 언어적 상호작용 


개발 도중 알아낸 것 혹은 팁 (know how)
  차의 state이 asleep 으로 들어가면 해당 차량과 연동되는 모든 api 가 작동되지 않음 -> wake api 로 해당 차를 깨워주어야함
  클라이언트 - 테슬라 서버 - 차량
  대부분의 api 가 차량까지 request 를 보낸 후 차량에서 response를 받아서 서버를 통해 클라이언트로 들어오는 것으로 보임


2020.03.01 : 
  Software 
    1. 앱을 켜면 asleep 상태의 차를 바로 깨울지 혹은 기능을 사용할 때 깨울지 의논 필요함
    2. NFC 를 이용하여 동승자에게 accessToken 전송 -> backSeat heater, door lock(unlock) 등등 차주대신 할 수 있거나 차주가 없어도 해야하는 기능들
    3. 백그라운드 (혹은 포그라운드) 위치 트랙킹을 하여 지도에 뿌려주고 운전별 배터리 효율, 거리, 등등 정보 제공
      1.저장되는 모든 정보는 휴대폰 변경을 위해 파일로 입.출력될 수 있어야 
    
    1. After Blow 기능 필요함
      function
        기상 api로 차량 지역 비 오는지 안오는지 확인
        if rain : vent
        else : close
        바깥 온도보다 내부 온도를 높게 설정 (기온이 맥스 온도보다 높다면???)
        해당 온도로 몇분간 (default 5min) 송풍 후 stop
        끝나고 창문 열려있으면 close
        
        option: 송풍 시간, vent or not
        
      data
        차량 조회 : 위도 및 경도, 바깥 온도
        
2020.07.21 :
  자동차 주행 정보를 이용한 데이터 가공
  aws lambda 를 이용한 serverless 시스템

  시나리오
    1.로그인 시 차량 아이디, 토큰을 http(혹은 rest) api 를 구현한 lambda 로 전송
      1.람다에서는 db 에 해당 차량 아이디 검색 후 없으면 새로 생성, 있으면 토큰을 업데이트
    2.크론텝을 돌려서 매 5분마다 람다는 db의 차량 아이디 테이블을 모두 쿼리하여 해당 아이디와 토큰으로 차량 tesla drive state 호출
      1.받아온 정보를 차량 아이디별, 날짜별로 저장
      
  DB 설계
    tesla drive state response
    https://owner-api.teslamotors.com/api/1/vehicles/:id/vehicle_data
    에서 필요한 데이터만을 db 에 저장해야 함
    
    "drive_state": {
      "gps_as_of": 1558229088,
      "heading": 163,
      "latitude": 40.459698,
      "longitude": -79.92347,
      "native_latitude": 40.459698,
      "native_location_supported": 1,
      "native_longitude": -79.92347,
      "native_type": "wgs",
      "power": null,
      "shift_state": null,
      "speed": null,
      "timestamp": 1558229319160
    },
    추가로
    vehicle_state.odometer 필요
    
    아래 배터리 관련 정보에서 필요 / 불필요 정보 분석해야함
    "charge_state": {
      "battery_heater_on": false,
      "battery_level": 74,
      "battery_range": 186.57,
      "charge_current_request": 48,
      "charge_current_request_max": 48,
      "charge_enable_request": true,
      "charge_energy_added": 29.64,
      "charge_limit_soc": 90,
      "charge_limit_soc_max": 100,
      "charge_limit_soc_min": 50,
      "charge_limit_soc_std": 90,
      "charge_miles_added_ideal": 117.0,
      "charge_miles_added_rated": 91.5,
      "charge_port_cold_weather_mode": null,
      "charge_port_door_open": false,
      "charge_port_latch": "Engaged",
      "charge_rate": 0.0,
      "charge_to_max_range": false,
      "charger_actual_current": 0,
      "charger_phases": null,
      "charger_pilot_current": 48,
      "charger_power": 0,
      "charger_voltage": 0,
      "charging_state": "Disconnected",
      "conn_charge_cable": "<invalid>",
      "est_battery_range": 146.18,
      "fast_charger_brand": "<invalid>",
      "fast_charger_present": false,
      "fast_charger_type": "<invalid>",
      "ideal_battery_range": 238.93,
      "managed_charging_active": false,
      "managed_charging_start_time": null,
      "managed_charging_user_canceled": false,
      "max_range_charge_counter": 0,
      "not_enough_power_to_heat": false,
      "scheduled_charging_pending": false,
      "scheduled_charging_start_time": null,
      "time_to_full_charge": 0.0,
      "timestamp": 1558229319159,
      "trip_charging": false,
      "usable_battery_level": 74,
      "user_charge_enable_request": null
    },
  
2020.08.20
  제로백을 모아다가 서버에 업로드 - 랭킹 
        

      
  Hardware
    1. 와이퍼
    2. 핸드폰 거치대
    3. 충전기를 타인이 뽑지 못하도록 방지하는 락커
    4. 차에 저장되어있는 영상을 모종의 무선 연결을 이용하여 실시간으로 폰에서 볼 수 있도록
